//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\PAA\ANTLR project\TryAntlrAgain\AntlrEQrms\RecogniseFormulas.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace AntlrEQrms {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class RecogniseFormulasParser : Parser {
	public const int
		TAB=1, NL=2, STUFF=3;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'\t'", "NL", "STUFF"
	};
	public const int
		RULE_file = 0, RULE_row = 1;
	public static readonly string[] ruleNames = {
		"file", "row"
	};

	public override string GrammarFileName { get { return "RecogniseFormulas.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


	  List<int> col = new List<int>();
	  public RecogniseFormulasParser(ITokenStream input, List<int> col)
			: base(input)
		  {
			_interp = new ParserATNSimulator(this, _ATN);
			this.col = col;
		  }
	  
	public RecogniseFormulasParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class FileContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NL() { return GetTokens(RecogniseFormulasParser.NL); }
		public IReadOnlyList<RowContext> row() {
			return GetRuleContexts<RowContext>();
		}
		public ITerminalNode NL(int i) {
			return GetToken(RecogniseFormulasParser.NL, i);
		}
		public RowContext row(int i) {
			return GetRuleContext<RowContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecogniseFormulasListener typedListener = listener as IRecogniseFormulasListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecogniseFormulasListener typedListener = listener as IRecogniseFormulasListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecogniseFormulasVisitor<TResult> typedVisitor = visitor as IRecogniseFormulasVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 4; row();
				State = 5; Match(NL);
				}
				}
				State = 9;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==STUFF );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowContext : ParserRuleContext {
		public int i;
		public IToken _STUFF;
		public ITerminalNode STUFF(int i) {
			return GetToken(RecogniseFormulasParser.STUFF, i);
		}
		public IReadOnlyList<ITerminalNode> STUFF() { return GetTokens(RecogniseFormulasParser.STUFF); }
		public RowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecogniseFormulasListener typedListener = listener as IRecogniseFormulasListener;
			if (typedListener != null) typedListener.EnterRow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecogniseFormulasListener typedListener = listener as IRecogniseFormulasListener;
			if (typedListener != null) typedListener.ExitRow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecogniseFormulasVisitor<TResult> typedVisitor = visitor as IRecogniseFormulasVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RowContext row() {
		RowContext _localctx = new RowContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_row);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 11; _localctx._STUFF = Match(STUFF);

						_localctx.i++;
						if ( col.Contains(_localctx.i) ) Console.Write((_localctx._STUFF!=null?_localctx._STUFF.Text:null));
						
				}
				}
				State = 15;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==STUFF );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x5\x14\x4\x2\t"+
		"\x2\x4\x3\t\x3\x3\x2\x3\x2\x3\x2\x6\x2\n\n\x2\r\x2\xE\x2\v\x3\x3\x3\x3"+
		"\x6\x3\x10\n\x3\r\x3\xE\x3\x11\x3\x3\x2\x2\x2\x4\x2\x2\x4\x2\x2\x2\x13"+
		"\x2\t\x3\x2\x2\x2\x4\xF\x3\x2\x2\x2\x6\a\x5\x4\x3\x2\a\b\a\x4\x2\x2\b"+
		"\n\x3\x2\x2\x2\t\x6\x3\x2\x2\x2\n\v\x3\x2\x2\x2\v\t\x3\x2\x2\x2\v\f\x3"+
		"\x2\x2\x2\f\x3\x3\x2\x2\x2\r\xE\a\x5\x2\x2\xE\x10\b\x3\x1\x2\xF\r\x3\x2"+
		"\x2\x2\x10\x11\x3\x2\x2\x2\x11\xF\x3\x2\x2\x2\x11\x12\x3\x2\x2\x2\x12"+
		"\x5\x3\x2\x2\x2\x4\v\x11";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AntlrEQrms
