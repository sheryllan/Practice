//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\mh93685.EUR.000\Desktop\ANTLR project\TryAntlrAgain\GetValuesFromColumn\calculator.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace TryAntlrAgain {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class calculatorParser : Parser {
	public const int
		INT=1, FLOAT=2, STRING=3, NEQ=4, TRUE=5, FALSE=6, IF=7, OR=8, AND=9, ISERROR=10, 
		ISNAN=11, ISEQNAN=12, NOT=13, ABS=14, INTEXPR=15, DIVZERO=16, OPAR=17, 
		CPAR=18, CPARGREEDY=19, EQ=20, COMMA=21, MUL=22, DIV=23, ADD=24, SUB=25, 
		LTEQ=26, GTEQ=27, GT=28, LT=29, WS=30;
	public static readonly string[] tokenNames = {
		"<INVALID>", "INT", "FLOAT", "STRING", "NEQ", "TRUE", "FALSE", "IF", "OR", 
		"AND", "ISERROR", "ISNAN", "ISEQNAN", "NOT", "ABS", "INTEXPR", "'divide by zero'", 
		"'('", "')'", "CPARGREEDY", "'='", "','", "'*'", "'/'", "'+'", "'-'", 
		"'<='", "'>='", "'>'", "'<'", "WS"
	};
	public const int
		RULE_block = 0, RULE_expr = 1, RULE_atom = 2, RULE_if_stat = 3, RULE_and_stat = 4, 
		RULE_or_stat = 5, RULE_is_error = 6, RULE_is_number = 7, RULE_is_eqisnan = 8, 
		RULE_is_not = 9, RULE_abs_stat = 10, RULE_int_stat = 11, RULE_condition_block = 12, 
		RULE_leftstat_block = 13, RULE_rightstat_block = 14;
	public static readonly string[] ruleNames = {
		"block", "expr", "atom", "if_stat", "and_stat", "or_stat", "is_error", 
		"is_number", "is_eqisnan", "is_not", "abs_stat", "int_stat", "condition_block", 
		"leftstat_block", "rightstat_block"
	};

	public override string GrammarFileName { get { return "calculator.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public calculatorParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class BlockContext : ParserRuleContext {
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ITerminalNode Eof() { return GetToken(calculatorParser.Eof, 0); }
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << FLOAT) | (1L << STRING) | (1L << TRUE) | (1L << FALSE) | (1L << IF) | (1L << OR) | (1L << AND) | (1L << ISERROR) | (1L << ISNAN) | (1L << ISEQNAN) | (1L << NOT) | (1L << ABS) | (1L << INTEXPR) | (1L << DIVZERO) | (1L << OPAR) | (1L << SUB))) != 0)) {
				{
				{
				State = 30; expr(0);
				}
				}
				State = 35;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 36; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntExprContext : ExprContext {
		public Int_statContext int_stat() {
			return GetRuleContext<Int_statContext>(0);
		}
		public IntExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIntExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIntExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubExprContext : ExprContext {
		public IToken op;
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddSubExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAddSubExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAddSubExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomExprContext : ExprContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public AtomExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAtomExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAtomExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : ExprContext {
		public Or_statContext or_stat() {
			return GetRuleContext<Or_statContext>(0);
		}
		public OrExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsErrorExprContext : ExprContext {
		public Is_errorContext is_error() {
			return GetRuleContext<Is_errorContext>(0);
		}
		public IsErrorExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIsErrorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIsErrorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsErrorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AbsExprContext : ExprContext {
		public Abs_statContext abs_stat() {
			return GetRuleContext<Abs_statContext>(0);
		}
		public AbsExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAbsExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAbsExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbsExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsNumberExprContext : ExprContext {
		public Is_numberContext is_number() {
			return GetRuleContext<Is_numberContext>(0);
		}
		public IsNumberExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIsNumberExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIsNumberExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsNumberExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExprContext : ExprContext {
		public IToken op;
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LTEQ() { return GetToken(calculatorParser.LTEQ, 0); }
		public ITerminalNode LT() { return GetToken(calculatorParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(calculatorParser.GT, 0); }
		public ITerminalNode GTEQ() { return GetToken(calculatorParser.GTEQ, 0); }
		public RelationalExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterRelationalExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitRelationalExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsnotExprContext : ExprContext {
		public Is_notContext is_not() {
			return GetRuleContext<Is_notContext>(0);
		}
		public IsnotExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIsnotExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIsnotExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsnotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterParExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitParExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExprContext : ExprContext {
		public If_statContext if_stat() {
			return GetRuleContext<If_statContext>(0);
		}
		public IfExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIfExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIfExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IseqisnanExprContext : ExprContext {
		public Is_eqisnanContext is_eqisnan() {
			return GetRuleContext<Is_eqisnanContext>(0);
		}
		public IseqisnanExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIseqisnanExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIseqisnanExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIseqisnanExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivExprContext : ExprContext {
		public IToken op;
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MulDivExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterMulDivExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitMulDivExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExprContext : ExprContext {
		public IToken op;
		public ITerminalNode NEQ() { return GetToken(calculatorParser.NEQ, 0); }
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(calculatorParser.EQ, 0); }
		public EqualityExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterEqualityExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitEqualityExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExprContext : ExprContext {
		public And_statContext and_stat() {
			return GetRuleContext<And_statContext>(0);
		}
		public AndExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			switch (_input.La(1)) {
			case OPAR:
				{
				_localctx = new ParExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 39; Match(OPAR);
				State = 40; expr(0);
				State = 41; Match(CPAR);
				}
				break;
			case INT:
			case FLOAT:
			case STRING:
			case TRUE:
			case FALSE:
			case DIVZERO:
			case SUB:
				{
				_localctx = new AtomExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 43; atom();
				}
				break;
			case IF:
				{
				_localctx = new IfExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 44; if_stat();
				}
				break;
			case AND:
				{
				_localctx = new AndExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 45; and_stat();
				}
				break;
			case OR:
				{
				_localctx = new OrExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 46; or_stat();
				}
				break;
			case ISERROR:
				{
				_localctx = new IsErrorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 47; is_error();
				}
				break;
			case ISNAN:
				{
				_localctx = new IsNumberExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 48; is_number();
				}
				break;
			case ISEQNAN:
				{
				_localctx = new IseqisnanExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 49; is_eqisnan();
				}
				break;
			case NOT:
				{
				_localctx = new IsnotExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 50; is_not();
				}
				break;
			case ABS:
				{
				_localctx = new AbsExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 51; abs_stat();
				}
				break;
			case INTEXPR:
				{
				_localctx = new IntExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 52; int_stat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 69;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 67;
					switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
					case 1:
						{
						_localctx = new MulDivExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 55;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 56;
						((MulDivExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==MUL || _la==DIV) ) {
							((MulDivExprContext)_localctx).op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 57; expr(15);
						}
						break;

					case 2:
						{
						_localctx = new AddSubExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 58;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 59;
						((AddSubExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((AddSubExprContext)_localctx).op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 60; expr(14);
						}
						break;

					case 3:
						{
						_localctx = new EqualityExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 61;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 62;
						((EqualityExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==NEQ || _la==EQ) ) {
							((EqualityExprContext)_localctx).op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 63; expr(13);
						}
						break;

					case 4:
						{
						_localctx = new RelationalExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 64;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 65;
						((RelationalExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTEQ) | (1L << GTEQ) | (1L << GT) | (1L << LT))) != 0)) ) {
							((RelationalExprContext)_localctx).op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 66; expr(12);
						}
						break;
					}
					} 
				}
				State = 71;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BooleanAtomContext : AtomContext {
		public ITerminalNode FALSE() { return GetToken(calculatorParser.FALSE, 0); }
		public ITerminalNode TRUE() { return GetToken(calculatorParser.TRUE, 0); }
		public BooleanAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterBooleanAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitBooleanAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExprContext : AtomContext {
		public ITerminalNode SUB() { return GetToken(calculatorParser.SUB, 0); }
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public UnaryMinusExprContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterUnaryMinusExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitUnaryMinusExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringAtomContext : AtomContext {
		public ITerminalNode STRING() { return GetToken(calculatorParser.STRING, 0); }
		public StringAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterStringAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitStringAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivZeroAtomContext : AtomContext {
		public ITerminalNode DIVZERO() { return GetToken(calculatorParser.DIVZERO, 0); }
		public DivZeroAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterDivZeroAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitDivZeroAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivZeroAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberAtomContext : AtomContext {
		public ITerminalNode INT() { return GetToken(calculatorParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(calculatorParser.FLOAT, 0); }
		public NumberAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterNumberAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitNumberAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_atom);
		int _la;
		try {
			State = 78;
			switch (_input.La(1)) {
			case SUB:
				_localctx = new UnaryMinusExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 72; Match(SUB);
				State = 73; atom();
				}
				break;
			case INT:
			case FLOAT:
				_localctx = new NumberAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 74;
				_la = _input.La(1);
				if ( !(_la==INT || _la==FLOAT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case TRUE:
			case FALSE:
				_localctx = new BooleanAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 75;
				_la = _input.La(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case STRING:
				_localctx = new StringAtomContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 76; Match(STRING);
				}
				break;
			case DIVZERO:
				_localctx = new DivZeroAtomContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 77; Match(DIVZERO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(calculatorParser.IF, 0); }
		public Condition_blockContext condition_block() {
			return GetRuleContext<Condition_blockContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(calculatorParser.COMMA, 0); }
		public Leftstat_blockContext leftstat_block() {
			return GetRuleContext<Leftstat_blockContext>(0);
		}
		public Rightstat_blockContext rightstat_block() {
			return GetRuleContext<Rightstat_blockContext>(0);
		}
		public If_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIf_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIf_stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statContext if_stat() {
		If_statContext _localctx = new If_statContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_if_stat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(IF);
			State = 81; condition_block();
			State = 82; leftstat_block();
			State = 83; Match(COMMA);
			State = 84; rightstat_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_statContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Condition_blockContext condition_block(int i) {
			return GetRuleContext<Condition_blockContext>(i);
		}
		public IReadOnlyList<Condition_blockContext> condition_block() {
			return GetRuleContexts<Condition_blockContext>();
		}
		public ITerminalNode CPAR() { return GetToken(calculatorParser.CPAR, 0); }
		public ITerminalNode AND() { return GetToken(calculatorParser.AND, 0); }
		public And_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAnd_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAnd_stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_stat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_statContext and_stat() {
		And_statContext _localctx = new And_statContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_and_stat);
		try {
			int _alt;
			State = 100;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; Match(AND);
				State = 90;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 87; condition_block();
						}
						} 
					}
					State = 92;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
				}
				State = 93; expr(0);
				State = 94; Match(CPAR);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96; Match(AND);
				State = 97; expr(0);
				State = 98; Match(CPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_statContext : ParserRuleContext {
		public Condition_blockContext condition_block(int i) {
			return GetRuleContext<Condition_blockContext>(i);
		}
		public IReadOnlyList<Condition_blockContext> condition_block() {
			return GetRuleContexts<Condition_blockContext>();
		}
		public ITerminalNode OR() { return GetToken(calculatorParser.OR, 0); }
		public Rightstat_blockContext rightstat_block() {
			return GetRuleContext<Rightstat_blockContext>(0);
		}
		public Or_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterOr_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitOr_stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr_stat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Or_statContext or_stat() {
		Or_statContext _localctx = new Or_statContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_or_stat);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(OR);
			State = 106;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 103; condition_block();
					}
					} 
				}
				State = 108;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			State = 109; rightstat_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Is_errorContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CPAR() { return GetToken(calculatorParser.CPAR, 0); }
		public ITerminalNode ISERROR() { return GetToken(calculatorParser.ISERROR, 0); }
		public Is_errorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_is_error; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIs_error(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIs_error(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIs_error(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Is_errorContext is_error() {
		Is_errorContext _localctx = new Is_errorContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_is_error);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(ISERROR);
			State = 112; expr(0);
			State = 113; Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Is_numberContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ISNAN() { return GetToken(calculatorParser.ISNAN, 0); }
		public ITerminalNode CPAR() { return GetToken(calculatorParser.CPAR, 0); }
		public Is_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_is_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIs_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIs_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIs_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Is_numberContext is_number() {
		Is_numberContext _localctx = new Is_numberContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_is_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(ISNAN);
			State = 116; expr(0);
			State = 117; Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Is_eqisnanContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CPAR() { return GetToken(calculatorParser.CPAR, 0); }
		public ITerminalNode ISEQNAN() { return GetToken(calculatorParser.ISEQNAN, 0); }
		public Is_eqisnanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_is_eqisnan; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIs_eqisnan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIs_eqisnan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIs_eqisnan(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Is_eqisnanContext is_eqisnan() {
		Is_eqisnanContext _localctx = new Is_eqisnanContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_is_eqisnan);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; Match(ISEQNAN);
			State = 120; expr(0);
			State = 121; Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Is_notContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(calculatorParser.NOT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CPAR() { return GetToken(calculatorParser.CPAR, 0); }
		public Is_notContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_is_not; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIs_not(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIs_not(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIs_not(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Is_notContext is_not() {
		Is_notContext _localctx = new Is_notContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_is_not);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(NOT);
			State = 124; expr(0);
			State = 125; Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abs_statContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CPAR() { return GetToken(calculatorParser.CPAR, 0); }
		public ITerminalNode ABS() { return GetToken(calculatorParser.ABS, 0); }
		public Abs_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abs_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAbs_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAbs_stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbs_stat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Abs_statContext abs_stat() {
		Abs_statContext _localctx = new Abs_statContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_abs_stat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(ABS);
			State = 128; expr(0);
			State = 129; Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_statContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode INTEXPR() { return GetToken(calculatorParser.INTEXPR, 0); }
		public ITerminalNode CPAR() { return GetToken(calculatorParser.CPAR, 0); }
		public Int_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInt_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInt_stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt_stat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Int_statContext int_stat() {
		Int_statContext _localctx = new Int_statContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_int_stat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(INTEXPR);
			State = 132; expr(0);
			State = 133; Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Condition_blockContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(calculatorParser.COMMA, 0); }
		public Condition_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterCondition_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitCondition_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Condition_blockContext condition_block() {
		Condition_blockContext _localctx = new Condition_blockContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_condition_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; expr(0);
			State = 136; Match(COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Leftstat_blockContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Leftstat_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftstat_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterLeftstat_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitLeftstat_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftstat_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Leftstat_blockContext leftstat_block() {
		Leftstat_blockContext _localctx = new Leftstat_blockContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_leftstat_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rightstat_blockContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CPAR() { return GetToken(calculatorParser.CPAR, 0); }
		public Rightstat_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightstat_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterRightstat_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitRightstat_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightstat_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rightstat_blockContext rightstat_block() {
		Rightstat_blockContext _localctx = new Rightstat_blockContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_rightstat_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; expr(0);
			State = 141; Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 14);

		case 1: return Precpred(_ctx, 13);

		case 2: return Precpred(_ctx, 12);

		case 3: return Precpred(_ctx, 11);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3 \x92\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x3\x2\a\x2\"\n\x2\f\x2\xE\x2%\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x5\x3\x38\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\a\x3\x46\n\x3\f\x3\xE\x3I\v\x3\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x5\x4Q\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x6\x3\x6\a\x6[\n\x6\f\x6\xE\x6^\v\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x5\x6g\n\x6\x3\a\x3\a\a\ak\n\a\f\a\xE\an\v\a\x3\a\x3\a\x3\b"+
		"\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v"+
		"\x3\v\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF"+
		"\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x2\x2\x3\x4\x11\x2\x2\x4\x2\x6\x2\b"+
		"\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2\x2\b\x3\x2\x18\x19\x3\x2\x1A\x1B\x4\x2\x6\x6\x16\x16\x3\x2\x1C\x1F"+
		"\x3\x2\x3\x4\x3\x2\a\b\x98\x2#\x3\x2\x2\x2\x4\x37\x3\x2\x2\x2\x6P\x3\x2"+
		"\x2\x2\bR\x3\x2\x2\x2\n\x66\x3\x2\x2\x2\fh\x3\x2\x2\x2\xEq\x3\x2\x2\x2"+
		"\x10u\x3\x2\x2\x2\x12y\x3\x2\x2\x2\x14}\x3\x2\x2\x2\x16\x81\x3\x2\x2\x2"+
		"\x18\x85\x3\x2\x2\x2\x1A\x89\x3\x2\x2\x2\x1C\x8C\x3\x2\x2\x2\x1E\x8E\x3"+
		"\x2\x2\x2 \"\x5\x4\x3\x2! \x3\x2\x2\x2\"%\x3\x2\x2\x2#!\x3\x2\x2\x2#$"+
		"\x3\x2\x2\x2$&\x3\x2\x2\x2%#\x3\x2\x2\x2&\'\a\x2\x2\x3\'\x3\x3\x2\x2\x2"+
		"()\b\x3\x1\x2)*\a\x13\x2\x2*+\x5\x4\x3\x2+,\a\x14\x2\x2,\x38\x3\x2\x2"+
		"\x2-\x38\x5\x6\x4\x2.\x38\x5\b\x5\x2/\x38\x5\n\x6\x2\x30\x38\x5\f\a\x2"+
		"\x31\x38\x5\xE\b\x2\x32\x38\x5\x10\t\x2\x33\x38\x5\x12\n\x2\x34\x38\x5"+
		"\x14\v\x2\x35\x38\x5\x16\f\x2\x36\x38\x5\x18\r\x2\x37(\x3\x2\x2\x2\x37"+
		"-\x3\x2\x2\x2\x37.\x3\x2\x2\x2\x37/\x3\x2\x2\x2\x37\x30\x3\x2\x2\x2\x37"+
		"\x31\x3\x2\x2\x2\x37\x32\x3\x2\x2\x2\x37\x33\x3\x2\x2\x2\x37\x34\x3\x2"+
		"\x2\x2\x37\x35\x3\x2\x2\x2\x37\x36\x3\x2\x2\x2\x38G\x3\x2\x2\x2\x39:\f"+
		"\x10\x2\x2:;\t\x2\x2\x2;\x46\x5\x4\x3\x11<=\f\xF\x2\x2=>\t\x3\x2\x2>\x46"+
		"\x5\x4\x3\x10?@\f\xE\x2\x2@\x41\t\x4\x2\x2\x41\x46\x5\x4\x3\xF\x42\x43"+
		"\f\r\x2\x2\x43\x44\t\x5\x2\x2\x44\x46\x5\x4\x3\xE\x45\x39\x3\x2\x2\x2"+
		"\x45<\x3\x2\x2\x2\x45?\x3\x2\x2\x2\x45\x42\x3\x2\x2\x2\x46I\x3\x2\x2\x2"+
		"G\x45\x3\x2\x2\x2GH\x3\x2\x2\x2H\x5\x3\x2\x2\x2IG\x3\x2\x2\x2JK\a\x1B"+
		"\x2\x2KQ\x5\x6\x4\x2LQ\t\x6\x2\x2MQ\t\a\x2\x2NQ\a\x5\x2\x2OQ\a\x12\x2"+
		"\x2PJ\x3\x2\x2\x2PL\x3\x2\x2\x2PM\x3\x2\x2\x2PN\x3\x2\x2\x2PO\x3\x2\x2"+
		"\x2Q\a\x3\x2\x2\x2RS\a\t\x2\x2ST\x5\x1A\xE\x2TU\x5\x1C\xF\x2UV\a\x17\x2"+
		"\x2VW\x5\x1E\x10\x2W\t\x3\x2\x2\x2X\\\a\v\x2\x2Y[\x5\x1A\xE\x2ZY\x3\x2"+
		"\x2\x2[^\x3\x2\x2\x2\\Z\x3\x2\x2\x2\\]\x3\x2\x2\x2]_\x3\x2\x2\x2^\\\x3"+
		"\x2\x2\x2_`\x5\x4\x3\x2`\x61\a\x14\x2\x2\x61g\x3\x2\x2\x2\x62\x63\a\v"+
		"\x2\x2\x63\x64\x5\x4\x3\x2\x64\x65\a\x14\x2\x2\x65g\x3\x2\x2\x2\x66X\x3"+
		"\x2\x2\x2\x66\x62\x3\x2\x2\x2g\v\x3\x2\x2\x2hl\a\n\x2\x2ik\x5\x1A\xE\x2"+
		"ji\x3\x2\x2\x2kn\x3\x2\x2\x2lj\x3\x2\x2\x2lm\x3\x2\x2\x2mo\x3\x2\x2\x2"+
		"nl\x3\x2\x2\x2op\x5\x1E\x10\x2p\r\x3\x2\x2\x2qr\a\f\x2\x2rs\x5\x4\x3\x2"+
		"st\a\x14\x2\x2t\xF\x3\x2\x2\x2uv\a\r\x2\x2vw\x5\x4\x3\x2wx\a\x14\x2\x2"+
		"x\x11\x3\x2\x2\x2yz\a\xE\x2\x2z{\x5\x4\x3\x2{|\a\x14\x2\x2|\x13\x3\x2"+
		"\x2\x2}~\a\xF\x2\x2~\x7F\x5\x4\x3\x2\x7F\x80\a\x14\x2\x2\x80\x15\x3\x2"+
		"\x2\x2\x81\x82\a\x10\x2\x2\x82\x83\x5\x4\x3\x2\x83\x84\a\x14\x2\x2\x84"+
		"\x17\x3\x2\x2\x2\x85\x86\a\x11\x2\x2\x86\x87\x5\x4\x3\x2\x87\x88\a\x14"+
		"\x2\x2\x88\x19\x3\x2\x2\x2\x89\x8A\x5\x4\x3\x2\x8A\x8B\a\x17\x2\x2\x8B"+
		"\x1B\x3\x2\x2\x2\x8C\x8D\x5\x4\x3\x2\x8D\x1D\x3\x2\x2\x2\x8E\x8F\x5\x4"+
		"\x3\x2\x8F\x90\a\x14\x2\x2\x90\x1F\x3\x2\x2\x2\n#\x37\x45GP\\\x66l";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace TryAntlrAgain
