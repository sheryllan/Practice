//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\mh93685.EUR.000\Desktop\ANTLR project\TryAntlrAgain\TryAntlrAgain\calculator.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace TryAntlrAgain {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="calculatorParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public interface IcalculatorVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>booleanAtom</c>
	/// labeled alternative in <see cref="calculatorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBooleanAtom([NotNull] calculatorParser.BooleanAtomContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>addSubExpr</c>
	/// labeled alternative in <see cref="calculatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddSubExpr([NotNull] calculatorParser.AddSubExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="calculatorParser.and_stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAnd_stat([NotNull] calculatorParser.And_statContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>atomExpr</c>
	/// labeled alternative in <see cref="calculatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAtomExpr([NotNull] calculatorParser.AtomExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>orExpr</c>
	/// labeled alternative in <see cref="calculatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOrExpr([NotNull] calculatorParser.OrExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="calculatorParser.condition_block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCondition_block([NotNull] calculatorParser.Condition_blockContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>relationalExpr</c>
	/// labeled alternative in <see cref="calculatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelationalExpr([NotNull] calculatorParser.RelationalExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>numberAtom</c>
	/// labeled alternative in <see cref="calculatorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumberAtom([NotNull] calculatorParser.NumberAtomContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="calculatorParser.leftstat_block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLeftstat_block([NotNull] calculatorParser.Leftstat_blockContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>parExpr</c>
	/// labeled alternative in <see cref="calculatorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParExpr([NotNull] calculatorParser.ParExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>stringAtom</c>
	/// labeled alternative in <see cref="calculatorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringAtom([NotNull] calculatorParser.StringAtomContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="calculatorParser.rightstat_block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRightstat_block([NotNull] calculatorParser.Rightstat_blockContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ifExpr</c>
	/// labeled alternative in <see cref="calculatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfExpr([NotNull] calculatorParser.IfExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="calculatorParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlock([NotNull] calculatorParser.BlockContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="calculatorParser.if_stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIf_stat([NotNull] calculatorParser.If_statContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="calculatorParser.or_stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOr_stat([NotNull] calculatorParser.Or_statContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>mulDivExpr</c>
	/// labeled alternative in <see cref="calculatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMulDivExpr([NotNull] calculatorParser.MulDivExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>equalityExpr</c>
	/// labeled alternative in <see cref="calculatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqualityExpr([NotNull] calculatorParser.EqualityExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>andExpr</c>
	/// labeled alternative in <see cref="calculatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAndExpr([NotNull] calculatorParser.AndExprContext context);
}
} // namespace TryAntlrAgain
